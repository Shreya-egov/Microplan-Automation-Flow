{"name": "Test Microplan Creation", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=134.0.6998.165)\nStacktrace:\n#0 0x5cad64455bea <unknown>\n#1 0x5cad63ef37d0 <unknown>\n#2 0x5cad63ec7895 <unknown>\n#3 0x5cad63f7321e <unknown>\n#4 0x5cad63f90679 <unknown>\n#5 0x5cad63f6a863 <unknown>\n#6 0x5cad63f36ac8 <unknown>\n#7 0x5cad63f37c31 <unknown>\n#8 0x5cad6441f18b <unknown>\n#9 0x5cad64423112 <unknown>\n#10 0x5cad6440c04c <unknown>\n#11 0x5cad64423d04 <unknown>\n#12 0x5cad643f04bf <unknown>\n#13 0x5cad64444528 <unknown>\n#14 0x5cad644446f9 <unknown>\n#15 0x5cad64454a66 <unknown>\n#16 0x73fb13e9caa4 <unknown>\n#17 0x73fb13f29c3c <unknown>", "trace": "self = <testCases.setupMicroplan2.TestMPFlow object at 0x7906453563f0>\n\n    @allure.feature(\"Microplan Feature\")\n    @allure.story(\"Microplan Creation and Setup\")\n    @allure.title(\"Test Microplan Creation\")\n    @allure.description(\"This test case ensures the microplan creation is successful\")\n    def test_microplan_creation(self):\n        self.logger.info(\"Navigating to the Microplan creation\")\n        lp = Loginpage(self.driver)\n    \n        lp.get_setup_microplan_element()\n        lp.nextbuttonone()\n        lp.set_unique_microplan_name()\n        lp.nextbuttonone()\n        lp.popprocceed()\n>       lp.countrydropdown(self.countrydrop)\n\ntestCases/setupMicroplan2.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npageobjects/LoginpageDEMO.py:270: in countrydropdown\n    countrydropdown_elem = WebDriverWait(self.driver, 30).until(\n../../Microplan/venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:137: in until\n    value = method(self._driver)\n../../Microplan/venv/lib/python3.12/site-packages/selenium/webdriver/support/expected_conditions.py:633: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n../../Microplan/venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n../../Microplan/venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x790645355730>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\\\n#15 0x5cad64454a66 \\\\u003Cunknown>\\\\n#16 0x73fb13e9caa4 \\\\u003Cunknown>\\\\n#17 0x73fb13f29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=134.0.6998.165)\nE       Stacktrace:\nE       #0 0x5cad64455bea <unknown>\nE       #1 0x5cad63ef37d0 <unknown>\nE       #2 0x5cad63ec7895 <unknown>\nE       #3 0x5cad63f7321e <unknown>\nE       #4 0x5cad63f90679 <unknown>\nE       #5 0x5cad63f6a863 <unknown>\nE       #6 0x5cad63f36ac8 <unknown>\nE       #7 0x5cad63f37c31 <unknown>\nE       #8 0x5cad6441f18b <unknown>\nE       #9 0x5cad64423112 <unknown>\nE       #10 0x5cad6440c04c <unknown>\nE       #11 0x5cad64423d04 <unknown>\nE       #12 0x5cad643f04bf <unknown>\nE       #13 0x5cad64444528 <unknown>\nE       #14 0x5cad644446f9 <unknown>\nE       #15 0x5cad64454a66 <unknown>\nE       #16 0x73fb13e9caa4 <unknown>\nE       #17 0x73fb13f29c3c <unknown>\n\n../../Microplan/venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: NoSuchWindowException"}, "description": "This test case ensures the microplan creation is successful", "attachments": [{"name": "log", "source": "9475ce0d-0c9d-4f8d-b681-c3682ac26065-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "1ef0c7ab-d225-4017-9013-410ac2726549-attachment.txt", "type": "text/plain"}], "start": 1743507655728, "stop": 1743507707726, "uuid": "35bd3800-a1de-43a4-a140-9f2736fc6cd6", "historyId": "bd9c1072a7efd62390acd843efbc4b51", "testCaseId": "bd9c1072a7efd62390acd843efbc4b51", "fullName": "testCases.setupMicroplan2.TestMPFlow#test_microplan_creation", "labels": [{"name": "feature", "value": "Microplan Feature"}, {"name": "story", "value": "Microplan Creation and Setup"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "setupMicroplan2"}, {"name": "subSuite", "value": "TestMPFlow"}, {"name": "host", "value": "shreya-kumar-Yoga-6-13ALC7"}, {"name": "thread", "value": "132674-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.setupMicroplan2"}]}