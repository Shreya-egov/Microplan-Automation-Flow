{"name": "test_complete_flow", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x56b6bfd4cbea <unknown>\n#1 0x56b6bf7ea7d0 <unknown>\n#2 0x56b6bf83bcc0 <unknown>\n#3 0x56b6bf83be41 <unknown>\n#4 0x56b6bf88a984 <unknown>\n#5 0x56b6bf861abd <unknown>\n#6 0x56b6bf887d0c <unknown>\n#7 0x56b6bf861863 <unknown>\n#8 0x56b6bf82dac8 <unknown>\n#9 0x56b6bf82ec31 <unknown>\n#10 0x56b6bfd1618b <unknown>\n#11 0x56b6bfd1a112 <unknown>\n#12 0x56b6bfd0304c <unknown>\n#13 0x56b6bfd1ad04 <unknown>\n#14 0x56b6bfce74bf <unknown>\n#15 0x56b6bfd3b528 <unknown>\n#16 0x56b6bfd3b6f9 <unknown>\n#17 0x56b6bfd4ba66 <unknown>\n#18 0x74537109caa4 <unknown>\n#19 0x745371129c3c <unknown>", "trace": "self = <testCases.setupMicroplan1.TestMPLoginFlow object at 0x726ad0bd6660>\n\n    def test_complete_flow(self):\n        logging.info(f\"Opening URL: {self.baseURL}\")\n        self.driver.get(self.baseURL)\n        lp = TestMPFlow(self.driver)\n    \n        # Step 1: Perform Login\n        logging.info(\"Performing login actions\")\n        lp.setusername(self.username)\n        lp.setpassword(self.password)\n        lp.setcountry(self.country_name)\n        lp.dpp()\n        lp.login()\n    \n        # Ensure successful login\n        act_title = self.driver.title\n        assert act_title == \"DIGIT HCM\", f\"Expected title 'DIGIT HCM' but got '{act_title}'\"\n        logging.info(\"Login successful, title verified\")\n    \n        # Step 2: Navigate to Microplan creation\n        logging.info(\"Navigating to the Microplan creation\")\n        lp.get_setup_microplan_element()\n        lp.nextbuttonone()\n        lp.set_unique_microplan_name()\n        lp.nextbuttonone()\n        lp.popprocceed()\n>       lp.countrydropdown(self.countrydrop)\n\ntestCases/setupMicroplan1.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npageobjects/Microplan.py:274: in countrydropdown\n    countrydropdown_elem = WebDriverWait(self.driver, 30).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"be72e27ca5e84a1f911b4d05708f5153\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x726ad066e520>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x56b6bfd4cbea <unknown>\nE       #1 0x56b6bf7ea7d0 <unknown>\nE       #2 0x56b6bf83bcc0 <unknown>\nE       #3 0x56b6bf83be41 <unknown>\nE       #4 0x56b6bf88a984 <unknown>\nE       #5 0x56b6bf861abd <unknown>\nE       #6 0x56b6bf887d0c <unknown>\nE       #7 0x56b6bf861863 <unknown>\nE       #8 0x56b6bf82dac8 <unknown>\nE       #9 0x56b6bf82ec31 <unknown>\nE       #10 0x56b6bfd1618b <unknown>\nE       #11 0x56b6bfd1a112 <unknown>\nE       #12 0x56b6bfd0304c <unknown>\nE       #13 0x56b6bfd1ad04 <unknown>\nE       #14 0x56b6bfce74bf <unknown>\nE       #15 0x56b6bfd3b528 <unknown>\nE       #16 0x56b6bfd3b6f9 <unknown>\nE       #17 0x56b6bfd4ba66 <unknown>\nE       #18 0x74537109caa4 <unknown>\nE       #19 0x745371129c3c <unknown>\n\n../../Microplan/venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException"}, "attachments": [{"name": "log", "source": "ca4de67e-e154-47ea-bcf8-ded81a8ee237-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "542cc1f6-396a-4e17-9cbb-551035000525-attachment.txt", "type": "text/plain"}], "start": 1743530728070, "stop": 1743530971329, "uuid": "1fee60e0-b89d-4118-b481-efc68ea55d47", "historyId": "abb80203c03def73a35f3be974cce559", "testCaseId": "abb80203c03def73a35f3be974cce559", "fullName": "testCases.setupMicroplan1.TestMPLoginFlow#test_complete_flow", "labels": [{"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "setupMicroplan1"}, {"name": "subSuite", "value": "TestMPLoginFlow"}, {"name": "host", "value": "shreya-kumar-Yoga-6-13ALC7"}, {"name": "thread", "value": "21275-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.setupMicroplan1"}]}