{"name": "test_complete_flow", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x59b663ec4bea <unknown>\n#1 0x59b6639627d0 <unknown>\n#2 0x59b6639b3cc0 <unknown>\n#3 0x59b6639b3e41 <unknown>\n#4 0x59b663a02984 <unknown>\n#5 0x59b6639d9abd <unknown>\n#6 0x59b6639ffd0c <unknown>\n#7 0x59b6639d9863 <unknown>\n#8 0x59b6639a5ac8 <unknown>\n#9 0x59b6639a6c31 <unknown>\n#10 0x59b663e8e18b <unknown>\n#11 0x59b663e92112 <unknown>\n#12 0x59b663e7b04c <unknown>\n#13 0x59b663e92d04 <unknown>\n#14 0x59b663e5f4bf <unknown>\n#15 0x59b663eb3528 <unknown>\n#16 0x59b663eb36f9 <unknown>\n#17 0x59b663ec3a66 <unknown>\n#18 0x7b4ddc89caa4 <unknown>\n#19 0x7b4ddc929c3c <unknown>", "trace": "self = <testCases.setupMicroplan1.TestLoginFlow object at 0x75dc6f64cfe0>\n\n    def test_complete_flow(self):\n        logging.info(f\"Opening URL: {self.baseURL}\")\n        self.driver.get(self.baseURL)\n        lp = Loginpage(self.driver)\n    \n        # Step 1: Perform Login\n        logging.info(\"Performing login actions\")\n        lp.setusername(self.username)\n        lp.setpassword(self.password)\n        lp.setcountry(self.country_name)\n        lp.dpp()\n        lp.login()\n    \n        # Ensure successful login\n        act_title = self.driver.title\n        assert act_title == \"DIGIT HCM\", f\"Expected title 'DIGIT HCM' but got '{act_title}'\"\n        logging.info(\"Login successful, title verified\")\n    \n        # Step 2: Navigate to Microplan creation\n        logging.info(\"Navigating to the Microplan creation\")\n        lp.get_setup_microplan_element()\n        lp.nextbuttonone()\n        lp.set_unique_microplan_name()\n        lp.nextbuttonone()\n        lp.popprocceed()\n        lp.countrydropdown(self.countrydrop)\n    \n        # Step 3: Select Boundaries for the Microplan\n        logging.info(\"Selecting boundaries for the microplan\")\n    \n        lp.provincedropdown(self.provincedrop)\n        lp.BG1click()\n        lp.districtdropdown(self.districtdrop)\n        lp.BG1click()\n        lp.APdropdown(self.APdrop)\n        lp.BG1click()\n        lp.Localitydropdown()\n        lp.BG1click()\n        lp.VillageDropdown()\n        lp.BG1click()\n        lp.nextbuttonone()\n    \n        # Step 4: Upload Population and Facility Details\n        logging.info(\"Uploading population and facility details\")\n        lp.upload_Pop_excel_file()\n        lp.nextbuttonone()\n        lp.upload_Facility_excel_file()\n        lp.nextbuttonone()\n        lp.selectTogetherProcess()\n        lp.nextbuttonone()\n    \n        # Step 5: Add Assumptions and Estimations\n        logging.info(\"Adding assumptions and estimations\")\n        lp.Genassumptions()\n        lp.nextbuttontwo()\n        lp.HRassump()\n        lp.nextbuttontwo()\n        lp.commodassump()\n        lp.nextbuttontwo()\n        lp.nextbuttonone()\n        lp.nextbuttontwo()\n        lp.nextbuttontwo()\n        lp.nextbuttontwo()\n        lp.nextbuttonone()\n    \n        # Step 6: Tag Users for the Microplan\n        logging.info(\"Tagging users for the microplan\")\n        lp.tagNMP()\n        lp.nextbuttontwo()\n        lp.tagNFA()\n        lp.nextbuttontwo()\n        lp.tagNPA()\n        lp.nextbuttontwo()\n        lp.nextbuttontwo()\n        lp.nextbuttontwo()\n        lp.nextbuttonone()\n        lp.nextbuttonone()\n    \n        # Step 7: Create the Microplan\n        logging.info(\"Creating the microplan\")\n>       lp.createMicroplan()\n\ntestCases/setupMicroplan1.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageobjects/LoginpageDEMO.py:739: in createMicroplan\n    createcampaign_element = WebDriverWait(self.driver, 15).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"6921620f4b6d61d46c04c1e8cb8f3f4c\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x75dc6f4b87c0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x59b663ec4bea <unknown>\nE       #1 0x59b6639627d0 <unknown>\nE       #2 0x59b6639b3cc0 <unknown>\nE       #3 0x59b6639b3e41 <unknown>\nE       #4 0x59b663a02984 <unknown>\nE       #5 0x59b6639d9abd <unknown>\nE       #6 0x59b6639ffd0c <unknown>\nE       #7 0x59b6639d9863 <unknown>\nE       #8 0x59b6639a5ac8 <unknown>\nE       #9 0x59b6639a6c31 <unknown>\nE       #10 0x59b663e8e18b <unknown>\nE       #11 0x59b663e92112 <unknown>\nE       #12 0x59b663e7b04c <unknown>\nE       #13 0x59b663e92d04 <unknown>\nE       #14 0x59b663e5f4bf <unknown>\nE       #15 0x59b663eb3528 <unknown>\nE       #16 0x59b663eb36f9 <unknown>\nE       #17 0x59b663ec3a66 <unknown>\nE       #18 0x7b4ddc89caa4 <unknown>\nE       #19 0x7b4ddc929c3c <unknown>\n\nvenv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException"}, "attachments": [{"name": "log", "source": "144d0368-4573-4a90-9f3e-cb2a2d0c3a7f-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "07fe96e5-e373-47e8-969d-c1602ac80bf1-attachment.txt", "type": "text/plain"}], "start": 1743498980422, "stop": 1743499629076, "uuid": "715305d6-af86-483c-9faf-283e6e8409a4", "historyId": "96a4c59041f5587d1c00e20b1f6a9136", "testCaseId": "96a4c59041f5587d1c00e20b1f6a9136", "fullName": "testCases.setupMicroplan1.TestLoginFlow#test_complete_flow", "labels": [{"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "setupMicroplan1"}, {"name": "subSuite", "value": "TestLoginFlow"}, {"name": "host", "value": "shreya-kumar-Yoga-6-13ALC7"}, {"name": "thread", "value": "112794-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.setupMicroplan1"}]}