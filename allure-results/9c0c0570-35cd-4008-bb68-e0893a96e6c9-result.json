{"name": "test_complete_flow", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n#0 0x650c163cabea <unknown>\n#1 0x650c15e68623 <unknown>\n#2 0x650c15eaad7f <unknown>\n#3 0x650c15edf996 <unknown>\n#4 0x650c15eda1f2 <unknown>\n#5 0x650c15ed9325 <unknown>\n#6 0x650c15e31328 <unknown>\n#7 0x650c1639418b <unknown>\n#8 0x650c16398112 <unknown>\n#9 0x650c1638104c <unknown>\n#10 0x650c16398d04 <unknown>\n#11 0x650c163654bf <unknown>\n#12 0x650c15e2fd72 <unknown>\n#13 0x7c3a71c2a1ca <unknown>\n#14 0x7c3a71c2a28b __libc_start_main\n#15 0x650c15df876a _start", "trace": "self = <testCases.setupMicroplan.TestMPLoginFlow object at 0x701f724f5c70>\n\n    @allure.story('Step 1: Perform Login')\n    def test_complete_flow(self):\n        # Step 1: Perform Login\n        allure.dynamic.feature('Login')  # Dynamic feature tag for the login step\n        self.driver.get(self.baseURL)\n        lp = TestMPFlow(self.driver)\n    \n        lp.setusername(self.username)\n        lp.setpassword(self.password)\n        lp.setcountry(self.country_name)\n        lp.dpp()\n        lp.login()\n    \n        # Ensure successful login\n        act_title = self.driver.title\n        assert act_title == \"DIGIT HCM\", f\"Expected title 'DIGIT HCM' but got '{act_title}'\"\n    \n        # Step 2: Navigate to Microplan creation\n        allure.dynamic.feature('Microplan Setup')  # Dynamic feature tag for microplan setup\n        lp.get_setup_microplan_element()\n        lp.nextbuttonone()\n        lp.set_unique_microplan_name()\n        lp.nextbuttonone()\n        lp.popprocceed()\n        lp.countrydropdown()\n        # lp.countrydropdown(self.countrydrop)\n    \n        # Step 3: Select Boundaries for the Microplan\n        allure.dynamic.feature('Boundary Selection')  # Dynamic feature tag for boundary selection\n        lp.provincedropdown()\n        lp.BG1click()\n        lp.districtdropdown()\n        lp.BG1click()\n        lp.APdropdown()\n        lp.BG1click()\n        lp.Localitydropdown()\n        lp.BG1click()\n        lp.VillageDropdown()\n        lp.BG1click()\n        lp.nextbuttonone()\n    \n        # Step 4: Upload Population and Facility Details\n        allure.dynamic.feature('Data Upload')  # Dynamic feature tag for data upload\n        lp.upload_Pop_excel_file()\n        lp.nextbuttonone()\n        lp.upload_Facility_excel_file()\n        lp.nextbuttonone()\n        lp.selectTogetherProcess()\n        lp.nextbuttonone()\n    \n        # Step 5: Add Assumptions and Estimations\n        allure.dynamic.feature('Assumptions and Estimations')  # Dynamic feature tag for assumptions\n        lp.Genassumptions()\n        lp.nextbuttontwo()\n        lp.HRassump()\n        lp.nextbuttontwo()\n        lp.commodassump()\n        lp.nextbuttontwo()\n        lp.nextbuttonone()\n        lp.nextbuttontwo()\n        lp.nextbuttontwo()\n        lp.nextbuttontwo()\n        lp.nextbuttonone()\n    \n        # Step 6: Tag Users for the Microplan\n        allure.dynamic.feature('User Tagging')  # Dynamic feature tag for user tagging\n        lp.tagNMP()\n        lp.nextbuttontwo()\n        lp.tagNFA()\n        lp.nextbuttontwo()\n        lp.tagNPA()\n        lp.nextbuttontwo()\n        lp.nextbuttontwo()\n        lp.nextbuttontwo()\n        lp.nextbuttonone()\n        lp.nextbuttonone()\n    \n        # Step 7: Create the Microplan\n        allure.dynamic.feature('Microplan Creation')  # Dynamic feature tag for microplan creation\n>       lp.createMicroplan()\n\ntestCases/setupMicroplan.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npageobjects/Microplan.py:748: in createMicroplan\n    createcampaign_element = WebDriverWait(self.driver, 15).until(\n../Microplan/venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:137: in until\n    value = method(self._driver)\n../Microplan/venv/lib/python3.12/site-packages/selenium/webdriver/support/expected_conditions.py:110: in _predicate\n    return driver.find_element(*locator)\n../Microplan/venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:898: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n../Microplan/venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x701f724f5160>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"#0 0x650...nknown>\\\\n#13 0x7c3a71c2a1ca \\\\u003Cunknown>\\\\n#14 0x7c3a71c2a28b __libc_start_main\\\\n#15 0x650c15df876a _start\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       #0 0x650c163cabea <unknown>\nE       #1 0x650c15e68623 <unknown>\nE       #2 0x650c15eaad7f <unknown>\nE       #3 0x650c15edf996 <unknown>\nE       #4 0x650c15eda1f2 <unknown>\nE       #5 0x650c15ed9325 <unknown>\nE       #6 0x650c15e31328 <unknown>\nE       #7 0x650c1639418b <unknown>\nE       #8 0x650c16398112 <unknown>\nE       #9 0x650c1638104c <unknown>\nE       #10 0x650c16398d04 <unknown>\nE       #11 0x650c163654bf <unknown>\nE       #12 0x650c15e2fd72 <unknown>\nE       #13 0x7c3a71c2a1ca <unknown>\nE       #14 0x7c3a71c2a28b __libc_start_main\nE       #15 0x650c15df876a _start\n\n../Microplan/venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: InvalidSessionIdException"}, "attachments": [{"name": "log", "source": "359c443f-7e67-4259-beb9-b18bf825ebbf-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "3c90b90b-8500-483a-ad31-2c0fab829435-attachment.txt", "type": "text/plain"}], "start": 1743574979285, "stop": 1743575133483, "uuid": "5af2654c-eeb2-4fde-ab64-cb512b3fc291", "historyId": "5cd26068b517f8953ac01f80989b1900", "testCaseId": "5cd26068b517f8953ac01f80989b1900", "fullName": "testCases.setupMicroplan.TestMPLoginFlow#test_complete_flow", "labels": [{"name": "feature", "value": "Login"}, {"name": "feature", "value": "Microplan Setup"}, {"name": "feature", "value": "Boundary Selection"}, {"name": "feature", "value": "Data Upload"}, {"name": "feature", "value": "Assumptions and Estimations"}, {"name": "feature", "value": "User Tagging"}, {"name": "feature", "value": "Microplan Creation"}, {"name": "story", "value": "Step 1: Perform Login"}, {"name": "feature", "value": "Microplan Test Flow"}, {"name": "suite", "value": "Test Microplan Flow"}, {"name": "parentSuite", "value": "testCases"}, {"name": "subSuite", "value": "TestMPLoginFlow"}, {"name": "host", "value": "shreya-kumar-Yoga-6-13ALC7"}, {"name": "thread", "value": "41159-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.setupMicroplan"}]}