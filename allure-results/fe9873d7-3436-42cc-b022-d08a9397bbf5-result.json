{"name": "test_complete_flow", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x653426e7bbea <unknown>\n#1 0x6534269197d0 <unknown>\n#2 0x65342696acc0 <unknown>\n#3 0x65342696ae41 <unknown>\n#4 0x6534269b9984 <unknown>\n#5 0x653426990abd <unknown>\n#6 0x6534269b6d0c <unknown>\n#7 0x653426990863 <unknown>\n#8 0x65342695cac8 <unknown>\n#9 0x65342695dc31 <unknown>\n#10 0x653426e4518b <unknown>\n#11 0x653426e49112 <unknown>\n#12 0x653426e3204c <unknown>\n#13 0x653426e49d04 <unknown>\n#14 0x653426e164bf <unknown>\n#15 0x653426e6a528 <unknown>\n#16 0x653426e6a6f9 <unknown>\n#17 0x653426e7aa66 <unknown>\n#18 0x79937169caa4 <unknown>\n#19 0x799371729c3c <unknown>", "trace": "self = <testCases.setupMicroplanQA.TestMPLoginFlow object at 0x7c4d44ec8290>\n\n    @allure.story('Step 1: Perform Login')\n    def test_complete_flow(self):\n        # Step 1: Perform Login\n        self.logger.info(f\"***************Opening URL: {self.baseURL}*****************\")\n        allure.dynamic.feature('Login')  # Dynamic feature tag for the login step\n        self.logger.info(\"*****************Performing login actions*******************\")\n        self.driver.get(self.baseURL)\n        lp = TestMPFlow(self.driver)\n    \n        lp.setusername(self.username)\n        lp.setpassword(self.password)\n        lp.setcountry(self.country_name)\n        lp.dpp()\n        lp.login()\n        self.logger.info(\"***********Logging successful***************\")\n    \n        # Ensure successful login\n        act_title = self.driver.title\n        assert act_title == \"DIGIT HCM\", f\"Expected title 'DIGIT HCM' but got '{act_title}'\"\n    \n        # Step 2: Navigate to Microplan creation\n        allure.dynamic.feature('Microplan Setup')  # Dynamic feature tag for microplan setup\n        lp.get_setup_microplan_element()\n        lp.nextbuttonone()\n        lp.set_unique_microplan_name()\n        self.logger.info(\"**********Microplan name initiated*****************\")\n        lp.nextbuttonone()\n        lp.popprocceed()\n>       lp.countrydropdown()\n\ntestCases/setupMicroplanQA.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npageobjects/MicroplanQA.py:280: in countrydropdown\n    countrydropdown_elem = WebDriverWait(self.driver, 30).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"bf5a2f51ec8bb312b35936896b22ce4a\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x7c4d44f22200>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x653426e7bbea <unknown>\nE       #1 0x6534269197d0 <unknown>\nE       #2 0x65342696acc0 <unknown>\nE       #3 0x65342696ae41 <unknown>\nE       #4 0x6534269b9984 <unknown>\nE       #5 0x653426990abd <unknown>\nE       #6 0x6534269b6d0c <unknown>\nE       #7 0x653426990863 <unknown>\nE       #8 0x65342695cac8 <unknown>\nE       #9 0x65342695dc31 <unknown>\nE       #10 0x653426e4518b <unknown>\nE       #11 0x653426e49112 <unknown>\nE       #12 0x653426e3204c <unknown>\nE       #13 0x653426e49d04 <unknown>\nE       #14 0x653426e164bf <unknown>\nE       #15 0x653426e6a528 <unknown>\nE       #16 0x653426e6a6f9 <unknown>\nE       #17 0x653426e7aa66 <unknown>\nE       #18 0x79937169caa4 <unknown>\nE       #19 0x799371729c3c <unknown>\n\n../Microplan/venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException"}, "attachments": [{"name": "log", "source": "26b3bea0-6e88-4863-bb3e-749073fd1094-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "94ea1799-4e38-47f9-92b4-ad4f6c5c1910-attachment.txt", "type": "text/plain"}], "start": 1744025704935, "stop": 1744025806828, "uuid": "a6337e39-f5dd-4cf7-b4db-908b9c8bd1c7", "historyId": "cfe858f92e24c756c130a8ffde367d2b", "testCaseId": "cfe858f92e24c756c130a8ffde367d2b", "fullName": "testCases.setupMicroplanQA.TestMPLoginFlow#test_complete_flow", "labels": [{"name": "feature", "value": "Login"}, {"name": "feature", "value": "Microplan Setup"}, {"name": "feature", "value": "Microplan Test Flow"}, {"name": "story", "value": "Step 1: Perform Login"}, {"name": "suite", "value": "Test Microplan Flow"}, {"name": "parentSuite", "value": "testCases"}, {"name": "subSuite", "value": "TestMPLoginFlow"}, {"name": "host", "value": "shreya-kumar-Yoga-6-13ALC7"}, {"name": "thread", "value": "211384-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.setupMicroplanQA"}]}