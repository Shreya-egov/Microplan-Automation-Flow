{"name": "test_complete_flow", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=134.0.6998.165)\nStacktrace:\n#0 0x5c3469f88bea <unknown>\n#1 0x5c3469a267d0 <unknown>\n#2 0x5c34699fa895 <unknown>\n#3 0x5c3469aa621e <unknown>\n#4 0x5c3469ac3679 <unknown>\n#5 0x5c3469a9d863 <unknown>\n#6 0x5c3469a69ac8 <unknown>\n#7 0x5c3469a6ac31 <unknown>\n#8 0x5c3469f5218b <unknown>\n#9 0x5c3469f56112 <unknown>\n#10 0x5c3469f3f04c <unknown>\n#11 0x5c3469f56d04 <unknown>\n#12 0x5c3469f234bf <unknown>\n#13 0x5c3469f77528 <unknown>\n#14 0x5c3469f776f9 <unknown>\n#15 0x5c3469f87a66 <unknown>\n#16 0x7bfe11a9caa4 <unknown>\n#17 0x7bfe11b29c3c <unknown>", "trace": "self = <testCases.setupMicroplanQA.TestMPLoginFlow object at 0x74a0ef25ee40>\n\n    @allure.story('Step 1: Perform Login')\n    def test_complete_flow(self):\n        # Step 1: Perform Login\n        self.logger.info(f\"***************Opening URL: {self.baseURL}*****************\")\n        allure.dynamic.feature('Login')  # Dynamic feature tag for the login step\n        self.logger.info(\"*****************Performing login actions*******************\")\n        self.driver.get(self.baseURL)\n        lp = TestMPFlow(self.driver)\n    \n        lp.setusername(self.username)\n        lp.setpassword(self.password)\n        lp.setcountry(self.country_name)\n        lp.dpp()\n        lp.login()\n        self.logger.info(\"***********Logging successful***************\")\n    \n        # Ensure successful login\n>       act_title = self.driver.title\n\ntestCases/setupMicroplanQA.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../Microplan/venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:465: in title\n    return self.execute(Command.GET_TITLE).get(\"value\", \"\")\n../Microplan/venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x74a0eeb143b0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\\\n#15 0x5c3469f87a66 \\\\u003Cunknown>\\\\n#16 0x7bfe11a9caa4 \\\\u003Cunknown>\\\\n#17 0x7bfe11b29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=134.0.6998.165)\nE       Stacktrace:\nE       #0 0x5c3469f88bea <unknown>\nE       #1 0x5c3469a267d0 <unknown>\nE       #2 0x5c34699fa895 <unknown>\nE       #3 0x5c3469aa621e <unknown>\nE       #4 0x5c3469ac3679 <unknown>\nE       #5 0x5c3469a9d863 <unknown>\nE       #6 0x5c3469a69ac8 <unknown>\nE       #7 0x5c3469a6ac31 <unknown>\nE       #8 0x5c3469f5218b <unknown>\nE       #9 0x5c3469f56112 <unknown>\nE       #10 0x5c3469f3f04c <unknown>\nE       #11 0x5c3469f56d04 <unknown>\nE       #12 0x5c3469f234bf <unknown>\nE       #13 0x5c3469f77528 <unknown>\nE       #14 0x5c3469f776f9 <unknown>\nE       #15 0x5c3469f87a66 <unknown>\nE       #16 0x7bfe11a9caa4 <unknown>\nE       #17 0x7bfe11b29c3c <unknown>\n\n../Microplan/venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: NoSuchWindowException"}, "attachments": [{"name": "log", "source": "f80d5cbe-5c04-4a72-89fc-72554be3b530-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "8d23694a-e9a3-4edf-b04e-3c45c1cbc941-attachment.txt", "type": "text/plain"}], "start": 1744018553414, "stop": 1744018557010, "uuid": "44f38d66-5e75-4b1e-8d8a-06041a896814", "historyId": "cfe858f92e24c756c130a8ffde367d2b", "testCaseId": "cfe858f92e24c756c130a8ffde367d2b", "fullName": "testCases.setupMicroplanQA.TestMPLoginFlow#test_complete_flow", "labels": [{"name": "feature", "value": "Login"}, {"name": "suite", "value": "Test Microplan Flow"}, {"name": "story", "value": "Step 1: Perform Login"}, {"name": "feature", "value": "Microplan Test Flow"}, {"name": "parentSuite", "value": "testCases"}, {"name": "subSuite", "value": "TestMPLoginFlow"}, {"name": "host", "value": "shreya-kumar-Yoga-6-13ALC7"}, {"name": "thread", "value": "183147-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.setupMicroplanQA"}]}