{"name": "Test Microplan Creation", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x57d9a8418bea <unknown>\n#1 0x57d9a7eb67d0 <unknown>\n#2 0x57d9a7f07cc0 <unknown>\n#3 0x57d9a7f07e41 <unknown>\n#4 0x57d9a7f56984 <unknown>\n#5 0x57d9a7f2dabd <unknown>\n#6 0x57d9a7f53d0c <unknown>\n#7 0x57d9a7f2d863 <unknown>\n#8 0x57d9a7ef9ac8 <unknown>\n#9 0x57d9a7efac31 <unknown>\n#10 0x57d9a83e218b <unknown>\n#11 0x57d9a83e6112 <unknown>\n#12 0x57d9a83cf04c <unknown>\n#13 0x57d9a83e6d04 <unknown>\n#14 0x57d9a83b34bf <unknown>\n#15 0x57d9a8407528 <unknown>\n#16 0x57d9a84076f9 <unknown>\n#17 0x57d9a8417a66 <unknown>\n#18 0x76544de9caa4 <unknown>\n#19 0x76544df29c3c <unknown>", "trace": "self = <testCases.setupMicroplan2.TestMPFlow object at 0x748d630e1d90>\n\n    @allure.feature(\"Microplan Feature\")\n    @allure.story(\"Microplan Creation and Setup\")\n    @allure.title(\"Test Microplan Creation\")\n    @allure.description(\"This test case ensures the microplan creation is successful\")\n    def test_microplan_creation(self):\n        self.logger.info(\"Navigating to the Microplan creation\")\n        lp = Loginpage(self.driver)\n    \n        lp.get_setup_microplan_element()\n        lp.nextbuttonone()\n        lp.set_unique_microplan_name()\n        lp.nextbuttonone()\n        lp.popprocceed()\n>       lp.countrydropdown(self.countrydrop)\n\ntestCases/setupMicroplan2.py:69: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npageobjects/LoginpageDEMO.py:270: in countrydropdown\n    countrydropdown_elem = WebDriverWait(self.driver, 30).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"bac527b3c29b0f5d0249e2d55ba54223\")>, method = <function element_to_be_clickable.<locals>._predicate at 0x748d621628e0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x57d9a8418bea <unknown>\nE       #1 0x57d9a7eb67d0 <unknown>\nE       #2 0x57d9a7f07cc0 <unknown>\nE       #3 0x57d9a7f07e41 <unknown>\nE       #4 0x57d9a7f56984 <unknown>\nE       #5 0x57d9a7f2dabd <unknown>\nE       #6 0x57d9a7f53d0c <unknown>\nE       #7 0x57d9a7f2d863 <unknown>\nE       #8 0x57d9a7ef9ac8 <unknown>\nE       #9 0x57d9a7efac31 <unknown>\nE       #10 0x57d9a83e218b <unknown>\nE       #11 0x57d9a83e6112 <unknown>\nE       #12 0x57d9a83cf04c <unknown>\nE       #13 0x57d9a83e6d04 <unknown>\nE       #14 0x57d9a83b34bf <unknown>\nE       #15 0x57d9a8407528 <unknown>\nE       #16 0x57d9a84076f9 <unknown>\nE       #17 0x57d9a8417a66 <unknown>\nE       #18 0x76544de9caa4 <unknown>\nE       #19 0x76544df29c3c <unknown>\n\n../../Microplan/venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException"}, "description": "This test case ensures the microplan creation is successful", "attachments": [{"name": "log", "source": "fcdafb8c-8b8f-4d8d-bf94-ab3dca205d0f-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "31111195-d2c1-4447-9961-42ab482bc61c-attachment.txt", "type": "text/plain"}], "start": 1743507429108, "stop": 1743507548149, "uuid": "f7986d22-7f96-4217-8cd9-12dcb5579da8", "historyId": "bd9c1072a7efd62390acd843efbc4b51", "testCaseId": "bd9c1072a7efd62390acd843efbc4b51", "fullName": "testCases.setupMicroplan2.TestMPFlow#test_microplan_creation", "labels": [{"name": "story", "value": "Microplan Creation and Setup"}, {"name": "feature", "value": "Microplan Feature"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "setupMicroplan2"}, {"name": "subSuite", "value": "TestMPFlow"}, {"name": "host", "value": "shreya-kumar-Yoga-6-13ALC7"}, {"name": "thread", "value": "131665-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.setupMicroplan2"}]}